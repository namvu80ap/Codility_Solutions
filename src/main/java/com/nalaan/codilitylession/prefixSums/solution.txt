// you can write to stdout for debugging purposes, e.g.
// printf("this is a debug message\n");

//100% correct
//idea is that the minimum slice in the array can only be 2 or 3 elements long
//this is not easy to see, but notice its impossible to find the minimum slice in less than O(N^2) if the slice is k length
//therefore we can see that there must be a constant upper bound to the slice length
//from there we can find some recursive insight into this fact
	//observe a minimal slice of any length can be composed only of length 2 and length 1 slices
	//we are not allowed length 1 slices, so any slice of odd length must therefore be composed of length 3 slices
	//any subslice cannot have a smaller average than the master slice, or it would be the slice with the smallest average
	//therefore it suffices to find the starting indices of the smalles slice of length two or three

int solution(int A[], int N) {
    int i;
    double* two_el = (double*) malloc(sizeof(double)*(N - 1));
    double* three_el = (double*) malloc(sizeof(double)*(N - 2));
    for (i = 0; i < N - 1 ;i ++) {
        two_el[i] = ((double)(A[i] + A[i+1]))/2;
        //printf("%.2f ", two_el[i]);
    }
    //printf("\n");
    for (i = 0; i < N - 2;i ++) {
        three_el[i] = ((double)(A[i] + A[i+1] + A[i+2]))/3;
        //printf("%.2f ", three_el[i]);
    }
    //printf("\n");
    double min_avg = 10000;
    int min_idx = 0;
    for (i = 0; i<N-1; i++) {
        if (two_el[i] < min_avg) {
            //printf("Old min avg is %.2f, ", min_avg);
            min_avg = two_el[i];
            min_idx = i;
            //printf("New min avg is %.2f, \n", min_avg);
        }
    }
    for (i = 0; i < N - 2; i ++) {
        if (three_el[i] < min_avg) {
            //printf("Old min avg is %.2f, ", min_avg);
            min_avg = three_el[i];
            min_idx = i;
            //printf("New min avg is %.2f, \n", min_avg);
        }
    }
    return min_idx;
}